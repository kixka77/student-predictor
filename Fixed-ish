import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

# Mock dataset
data = {
    'study_hours': [10, 5, 8, 12, 4, 9, 6, 14, 7, 11],
    'attendance': [90, 70, 85, 95, 60, 88, 75, 98, 80, 92],
    'assignments_done': [1, 0, 1, 1, 0, 1, 0, 1, 1, 1],
    'passed': [1, 0, 1, 1, 0, 1, 0, 1, 1, 1]
}
df = pd.DataFrame(data)

# Features and target
X = df.drop('passed', axis=1)
y = df['passed']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

# Scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# DNN model
model_dnn = Sequential([
    Dense(64, activation='relu', input_shape=(X_train_scaled.shape[1],)),
    Dense(32, activation='relu'),
    Dense(1, activation='sigmoid')
])

model_dnn.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Fit model
model_dnn.fit(X_train_scaled, y_train, epochs=20, batch_size=4, verbose=1)

# Predictions
y_pred_probs = model_dnn.predict(X_test_scaled)
y_pred = (y_pred_probs > 0.5).astype(int).flatten()

# Metrics
acc = accuracy_score(y_test, y_pred)
prec = precision_score(y_test, y_pred)
rec = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

print("Accuracy:", acc)
print("Precision:", prec)
print("Recall:", rec)
print("F1 Score:", f1)
